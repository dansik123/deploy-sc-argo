# Master database stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.appName }}-db-master"
  labels:
    app: "{{ .Values.appName }}-db-app"
    role: master
  namespace: "{{ .Values.appName }}-ns"
spec:
  serviceName: "{{ .Values.appName }}-db-master"
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}-db-app"
      role: master
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}-db-app"
        role: master
    spec:
      containers:
      - name: "{{ .Values.appName }}-database"
        image: "{{ .Values.database.image }}:{{ .Values.database.imageTag }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            mkdir -p "$(dirname "/etc/postgresql/pg_hba.conf")" &&
            echo "$REPLICATION_ACCESS" > /etc/postgresql/pg_hba.conf &&
            su -c "exec postgres" -s /bin/bash postgres
        env:
          - name: POSTGRES_INITDB_ARGS
            value: "--wal-level=replica --max-wal-senders=3 --wal-keep-size=64"
          - name: REPLICATION_ACCESS
            valueFrom:
              configMapKeyRef:
                name: postgres-master-configs
                key: PG_HBA_LINE
        envFrom:
        - secretRef:
            name: "{{ .Values.appName }}-db-secret"
        - secretRef:
            name: "{{ .Values.appName }}-db-replication-secret"
        ports:
          - containerPort: {{ .Values.database.accessPort }}
        volumeMounts:
          - mountPath: {{ .Values.database.storage.volumeTo }}
            name: database-master-data
          - mountPath: /docker-entrypoint-initdb.d
            name: init-scripts
      volumes:
        - name: init-scripts
          configMap:
            name: postgres-master-init-config
  volumeClaimTemplates:
  - metadata:
      name: database-master-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.database.storage.master.capacity }}
      storageClassName: storage-master-class
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.appName }}-db-master-service"
  namespace: "{{ .Values.appName }}-ns"
spec:
  selector:
    app: "{{ .Values.appName }}-db-app"
    role: master
  ports:
    - protocol: TCP
      port: {{ .Values.database.accessPort }}
      targetPort: {{ .Values.database.accessPort }}
  clusterIP: None
---
### replica statefull sets
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.appName }}-db-replica"
  labels:
    app: "{{ .Values.appName }}-db-app"
    role: replica
  namespace: "{{ .Values.appName }}-ns"
spec:
  serviceName: "{{ .Values.appName }}-db-replica"
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}-db-app"
      role: replica
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}-db-app"
        role: replica
    spec:
      initContainers:
      - name: make-script-executable
        image: harbor.locallab.ds/library/busybox:1.37-glibc
        command: ["sh", "-c"]
        args:
          - cp /script/replication-init.sh /scripts/replication-init.sh && chmod +x /scripts/replication-init.sh
        volumeMounts:
        - name: script
          mountPath: /script
        - name: script-writable
          mountPath: /scripts
      containers:
      - name: "{{ .Values.appName }}-database"
        image: "{{ .Values.database.image }}:{{ .Values.database.imageTag }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        envFrom:
        - secretRef:
            name: "{{ .Values.appName }}-db-secret"
        - secretRef:
            name: "{{ .Values.appName }}-db-replication-secret"
        env:
          - name: POSTGRES_MASTER_HOST
            value: "{{ .Values.appName }}-db-master-service"
        ports:
          - containerPort: {{ .Values.database.accessPort }}
        volumeMounts:
          - mountPath: {{ .Values.database.storage.volumeTo }}
            name: database-replica-data
          - mountPath: /scripts
            name: script-writable
        command: ["/bin/bash", "-c"]
        args:
          - /scripts/replication-init.sh
      volumes:
      - name: script
        configMap:
          name: postgres-replication-script
      - name: script-writable
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: database-replica-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.database.storage.master.capacity }}
      storageClassName: storage-replica-class
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.appName }}-db-replicas-service"
  namespace: "{{ .Values.appName }}-ns"
spec:
  selector:
    app: "{{ .Values.appName }}-db-app"
    role: replica
  ports:
    - protocol: TCP
      port: {{ .Values.database.accessPort }}
      targetPort: {{ .Values.database.accessPort }}
  clusterIP: None